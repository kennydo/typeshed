from datetime import datetime, timedelta, tzinfo
from typing import Any, Dict, Tuple, Optional

def memorized_timedelta(seconds: float) -> timedelta: ...
def memorized_datetime(seconds: float) -> datetime: ...
def memorized_ttinfo(*args): ...

class BaseTzInfo(tzinfo):
    zone: Any = ...

class StaticTzInfo(BaseTzInfo):
    def fromutc(self, dt: datetime) -> datetime: ...
    def utcoffset(self, dt: Optional[datetime]) -> timedelta: ...
    def dst(self, dt: Optional[datetime]) -> timedelta: ...
    def tzname(self, dt: Optional[datetime]) -> str: ...
    def localize(self, dt: datetime, is_dst: bool = ...) -> datetime: ...
    def normalize(self, dt: datetime, is_dst: bool = ...) -> datetime: ...

class DstTzInfo(BaseTzInfo):
    zone: Optional[str] = ...
    def __init__(self, _inf: Optional[Tuple[timedelta, timedelta, str]] = ..., _tzinfos: Optional[Dict[Tuple[timedelta, timedelta, str], 'DstTzInfo']] = ...) -> None: ...
    def fromutc(self, dt: datetime) -> datetime: ...
    def normalize(self, dt: datetime, is_dst: bool = ...) -> datetime: ...
    def localize(self, dt: datetime, is_dst: bool = ...) -> datetime: ...
    def utcoffset(self, dt: Optional[datetime]) -> timedelta: ...
    def dst(self, dt: Optional[datetime]) -> timedelta: ...
    def tzname(self, dt: Optional[datetime]) -> str: ...

def unpickler(zone: str, utcoffset: Optional[float] = ..., dstoffset: Optional[float] = ..., tzname: Optional[str] = ...) -> tzinfo: ...
