import datetime
from typing import Optional, List, Set, Dict, Union

from pytz.exceptions import AmbiguousTimeError, InvalidTimeError, NonExistentTimeError, UnknownTimeZoneError
from pytz.lazy import LazyDict

all_timezones = ...  # type: List
all_timezones_set = ...  # type: Set
common_timezones = ...  # type: List
common_timezones_set = ...  # type: Set


class _UTCclass(datetime.tzinfo):
    zone = ...  # type: str
    def fromutc(self, dt: Optional[datetime.datetime]) -> datetime.datetime: ...
    def utcoffset(self, dt: Optional[datetime.datetime]) -> datetime.timedelta: ...
    def tzname(self, dt: Optional[datetime.datetime]) -> str: ...
    def dst(self, dt: Optional[datetime.datetime]) -> datetime.timedelta: ...
    def localize(self, dt: datetime.datetime, is_dst: bool = ...) -> datetime.datetime: ...
    def normalize(self, dt: datetime.datetime, is_dst: bool = ...) -> datetime.datetime: ...

utc = ...  # type: _UTCclass
UTC = ...  # type: _UTCclass

class _CountryTimezoneDict(LazyDict):
    def __call__(self, iso3166_code: str) -> List[str]: ...

country_timezones: _CountryTimezoneDict

class _CountryNameDict(LazyDict): ...

country_names: _CountryNameDict

class _FixedOffset(datetime.tzinfo):
    zone = ...  # type: Optional[str]

    def utcoffset(self, dt: Optional[datetime.datetime]) -> datetime.timedelta: ...
    def dst(self, dt: Optional[datetime.datetime]) -> datetime.timedelta: ...
    def tzname(self, dt: Optional[datetime.datetime]) -> None: ...
    def localize(self, dt: datetime.datetime, is_dst: bool = ...) -> datetime.datetime: ...
    def normalize(self, dt: datetime.datetime, is_dst: bool = ...) -> datetime.datetime: ...


def FixedOffset(offset: int, _tzinfos: Dict[int, _FixedOffset]) -> _FixedOffset: ...

def timezone(zone: str) -> datetime.tzinfo: ...
